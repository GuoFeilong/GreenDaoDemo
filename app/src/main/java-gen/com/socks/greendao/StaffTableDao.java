package com.socks.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.socks.greendao.StaffTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STAFF_TABLE".
*/
public class StaffTableDao extends AbstractDao<StaffTable, Long> {

    public static final String TABLENAME = "STAFF_TABLE";

    /**
     * Properties of entity StaffTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StaffName = new Property(1, String.class, "staffName", false, "STAFF_NAME");
        public final static Property StaffNum = new Property(2, String.class, "staffNum", false, "STAFF_NUM");
        public final static Property StaffAge = new Property(3, Integer.class, "staffAge", false, "STAFF_AGE");
        public final static Property Motto = new Property(4, String.class, "motto", false, "MOTTO");
        public final static Property InsertTime = new Property(5, Long.class, "insertTime", false, "INSERT_TIME");
    };


    public StaffTableDao(DaoConfig config) {
        super(config);
    }
    
    public StaffTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STAFF_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STAFF_NAME\" TEXT," + // 1: staffName
                "\"STAFF_NUM\" TEXT," + // 2: staffNum
                "\"STAFF_AGE\" INTEGER," + // 3: staffAge
                "\"MOTTO\" TEXT," + // 4: motto
                "\"INSERT_TIME\" INTEGER);"); // 5: insertTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STAFF_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StaffTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String staffName = entity.getStaffName();
        if (staffName != null) {
            stmt.bindString(2, staffName);
        }
 
        String staffNum = entity.getStaffNum();
        if (staffNum != null) {
            stmt.bindString(3, staffNum);
        }
 
        Integer staffAge = entity.getStaffAge();
        if (staffAge != null) {
            stmt.bindLong(4, staffAge);
        }
 
        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(5, motto);
        }
 
        Long insertTime = entity.getInsertTime();
        if (insertTime != null) {
            stmt.bindLong(6, insertTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StaffTable readEntity(Cursor cursor, int offset) {
        StaffTable entity = new StaffTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // staffName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // staffNum
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // staffAge
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // motto
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // insertTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StaffTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStaffName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStaffNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaffAge(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMotto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInsertTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StaffTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StaffTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
